spring.application.name=project

#spring.datasource.username=data_ask_2024_user
#spring.datasource.password=vWAuwY3VNeH1NJOT62jPQwMvRUyKRf5R
#spring.datasource.url=jdbc:postgresql://dpg-cuaauo5ds78s739lo3bg-a.frankfurt-postgres.render.com:5432/data_ask_2024

spring.datasource.username=petuser
spring.datasource.password=petpass
spring.datasource.url=jdbc:postgresql://postgres:5432/petdb

spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

# JWT configuration
app.jwtSecret=ChangeThisSecretKeyToSomethingStrong123!
app.jwtExpirationMs=86400000

# Email SMTP settings for Gmail (for real email sending)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${GMAIL_USER}
spring.mail.password=${GMAIL_PASS}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# (Optional) For security, you can use environment variables instead of hardcoding username/password.
# Example:
# spring.mail.username=${GMAIL_USER}
# spring.mail.password=${GMAIL_PASS}

# Frontend URL for email verification links
app.frontend.url=http://localhost:8081

# MinIO Configuration
minio.endpoint=http://localhost:9000
minio.accessKey=minioadmin
minio.secretKey=minioadmin123
minio.bucket=pets-images
